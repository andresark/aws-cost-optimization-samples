AWSTemplateFormatVersion: '2010-09-09'
Resources:
  StartInstancesFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Code:
        ZipFile: |
          var AWS = require('aws-sdk');
          var ec2 = new AWS.EC2();
          exports.handler = function(event, context) {
            var params = {
              Filters: [
                {
                  Name: 'tag:autostart',
                  Values: ['yes']
                }
              ]
            };
            ec2.describeInstances(params, function(err, data) {
              if (err) {
                console.log(err, err.stack);
                context.fail(err);
              } else {
                var instanceIds = [];
                data.Reservations.forEach(function(reservation) {
                  reservation.Instances.forEach(function(instance) {
                    instanceIds.push(instance.InstanceId);
                  });
                });
                if (instanceIds.length > 0) {
                  var startParams = {
                    InstanceIds: instanceIds
                  };
                  ec2.startInstances(startParams, function(err, data) {
                    if (err) {
                      console.log(err, err.stack);
                      context.fail(err);
                    } else {
                      console.log(data);
                      context.succeed(data);
                    }
                  });
                } else {
                  console.log('No instances to start');
                  context.succeed('No instances to start');
                }
              }
            });
          };
      Runtime: nodejs16.x
  StopInstancesFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Code:
        ZipFile: |
          var AWS = require('aws-sdk');
          var ec2 = new AWS.EC2();
          exports.handler = function(event, context) {
            var params = {
              Filters: [
                {
                  Name: 'tag:autostop',
                  Values: ['no']
                }
              ]
            };
            ec2.describeInstances(params, function(err, data) {
              if (err) {
                console.log(err, err.stack);
                context.fail(err);
              } else {
                var instanceIds = [];
                data.Reservations.forEach(function(reservation) {
                  reservation.Instances.forEach(function(instance) {
                    instanceIds.push(instance.InstanceId);
                  });
                });
                if (instanceIds.length > 0) {
                  var stopParams = {
                    InstanceIds: instanceIds
                  };
                  ec2.stopInstances(stopParams, function(err, data) {
                    if (err) {
                      console.log(err, err.stack);
                      context.fail(err);
                    } else {
                      console.log(data);
                      context.succeed(data);
                    }
                  });
                } else {
                  console.log('No instances to stop');
                  context.succeed('No instances to stop');
                }
              }
            });
          };
      Runtime: nodejs16.x
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ec2Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:Start*'
                  - 'ec2:Stop*'
                Resource: '*'
  StartInstancesEvent:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: 'cron(30 11 ? * MON-FRI *)' # 7:30 AM US Eastern Time
      Targets:
        - Arn: !GetAtt 'StartInstancesFunction.Arn'
          Id: StartInstances
  StopInstancesEvent:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: 'cron(0 23 ? * * *)' # 7:00 PM US Eastern Time
      Targets:
        - Arn: !GetAtt 'StopInstancesFunction.Arn'
          Id: StopInstances